// Generated by Apple Swift version 4.2 effective-3.4 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AliyunLOGiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class LOGClient;

/// 本地缓存日志的管理器。在实例化时会开启定时器,网络状态监控器。每隔30秒会判断是否达到发送的网络条件,如果是的话,则从缓存中读取30条记录,然后批量上传。同时还会判断本地数据库文件是否达到大小上限(默认是30M,大于30M时从数据库中删除最先加入到数据库中的2000条记录) 此时处于上传中状态。当所有在group中的请求都结束时,才重置为可用状态。
SWIFT_CLASS("_TtC12AliyunLOGiOS17CacheCheckManager")
@interface CacheCheckManager : NSObject
- (nonnull instancetype)initWithTimeInterval:(NSInteger)timeInterval client:(LOGClient * _Nonnull)client fetchCount:(NSInteger)fetchCount OBJC_DESIGNATED_INITIALIZER;
- (void)startCacheCheck;
- (void)startMonitor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSDictionary;
@class NSArray;

/// 数据库管理器.支持增,删,查操作
SWIFT_CLASS("_TtC12AliyunLOGiOS9DBManager")
@interface DBManager : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable (^ _Nonnull dbPath)(void);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
+ (DBManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
/// asynchronously insert a record into db
/// \param endpoint endpoint’s name
///
/// \param project project’s name
///
/// \param logstore logstore’s name
///
/// \param log log’s message
///
/// \param timestamp timestamp when to invoke this method
///
- (void)insertRecordsWithEndpoint:(NSString * _Nonnull)endpoint project:(NSString * _Nonnull)project logstore:(NSString * _Nonnull)logstore log:(NSString * _Nonnull)log timestamp:(double)timestamp;
/// asynchronously delete record from db
/// \param record record,example:[“id”: “1”]
///
- (void)deleteRecordWithRecord:(NSDictionary * _Nullable)record;
/// synchronously fetch records in db
/// \param range limit
///
///
/// returns:
/// a array in which elements are dictionary
- (NSArray * _Nonnull)fetchRecordsWithLimit:(NSInteger)limit SWIFT_WARN_UNUSED_RESULT;
/// asynchronously delete records
/// \param count count
///
- (void)asyncDeleteRecordsWithCount:(NSInteger)count;
- (void)checkDBSize;
@end

@class SLSConfig;
@class LogGroup;
@class NSURLResponse;
@class NSError;

SWIFT_CLASS("_TtC12AliyunLOGiOS9LOGClient")
@interface LOGClient : NSObject
@property (nonatomic, copy) NSString * _Nonnull mEndPoint;
@property (nonatomic, copy) NSString * _Nonnull mAccessKeyID;
@property (nonatomic, copy) NSString * _Nonnull mAccessKeySecret;
@property (nonatomic, copy) NSString * _Nonnull mProject;
@property (nonatomic, copy) NSString * _Nullable mAccessToken;
@property (nonatomic) NSInteger retryCount;
@property (nonatomic, readonly) NSInteger retryMax;
@property (nonatomic) BOOL mIsLogEnable;
@property (nonatomic, strong) SLSConfig * _Nullable mConfig;
- (nonnull instancetype)initWithEndPoint:(NSString * _Nonnull)endPoint accessKeyID:(NSString * _Nonnull)accessKeyID accessKeySecret:(NSString * _Nonnull)accessKeySecret projectName:(NSString * _Nonnull)projectName token:(NSString * _Nullable)token config:(SLSConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEndPoint:(NSString * _Nonnull)endPoint accessKeyID:(NSString * _Nonnull)accessKeyID accessKeySecret:(NSString * _Nonnull)accessKeySecret token:(NSString * _Nonnull)token projectName:(NSString * _Nonnull)projectName config:(SLSConfig * _Nonnull)config;
- (void)SetToken:(NSString * _Nonnull)token;
- (NSString * _Nullable)GetToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)GetEndPoint SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)GetKeyID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)GetKeySecret SWIFT_WARN_UNUSED_RESULT;
- (void)PostLog:(LogGroup * _Nonnull)logGroup logStoreName:(NSString * _Nonnull)logStoreName call:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))call;
- (void)PostLogInCacheWithLogstore:(NSString * _Nonnull)logstore logMsg:(NSString * _Nonnull)logMsg call:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))call;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSMutableDictionary;

SWIFT_CLASS("_TtC12AliyunLOGiOS3Log")
@interface Log : NSObject
@property (nonatomic, strong) NSMutableDictionary * _Nonnull mContent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)PutTime:(int32_t)time;
- (void)PutContent:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
@end

@class NSMutableArray;

SWIFT_CLASS("_TtC12AliyunLOGiOS8LogGroup")
@interface LogGroup : NSObject
@property (nonatomic, readonly, strong) NSMutableArray * _Nonnull logs;
@property (nonatomic, readonly, copy) NSString * _Nonnull logTopic;
@property (nonatomic, readonly, copy) NSString * _Nonnull logSource;
- (nonnull instancetype)initWithTopic:(NSString * _Nonnull)topic source:(NSString * _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (void)PutTopic:(NSString * _Nonnull)topic;
- (void)PutSource:(NSString * _Nonnull)source;
- (void)PutLog:(Log * _Nonnull)log;
- (NSString * _Nonnull)GetJsonPackage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum SLSConnectionType : NSInteger;

SWIFT_CLASS("_TtC12AliyunLOGiOS9SLSConfig")
@interface SLSConfig : NSObject
@property (nonatomic, readonly) BOOL isCachable;
@property (nonatomic, readonly) enum SLSConnectionType connectType;
- (nonnull instancetype)initWithConnectType:(enum SLSConnectionType)connectType cachable:(BOOL)cachable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SLSConnectionType, closed) {
  SLSConnectionTypeWifi = 0,
  SLSConnectionTypeWifiOrwwan = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
